import React, { useState, useEffect } from "react";
import { 
  View, Text, ScrollView, TouchableOpacity, ActivityIndicator, 
  Image, Alert 
} from "react-native";
import axios from "axios";
import styles from "../styles/Reservation_courses"; 
import InstructorsHeader from "../components/InstructorsHeader";
import { LIST_RESERVATION_COURSES_API_URL, DELETE_COURSE_API_URL ,  CLOSE_COURSE_API_URL, 
  REOPEN_COURSE_API_URL } from "../config/apiConfig";
import AsyncStorage from '@react-native-async-storage/async-storage';

const ReservationCourses = ({ navigation }) => {
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const checkToken = async () => {
    const token = await AsyncStorage.getItem("authToken");
    console.log("üìå Token:", token);  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ Token
  };
  useEffect(() => {
    fetchCourses();
    checkToken();

  }, []);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™
  const fetchCourses = async () => {
    try {
      const token = await AsyncStorage.getItem("authToken"); // ‚úÖ ‡∏î‡∏∂‡∏á Token ‡∏à‡∏≤‡∏Å AsyncStorage
      if (!token) {
        console.error("‚ùå No auth token found.");
        return;
      }
  
      const response = await axios.get(LIST_RESERVATION_COURSES_API_URL, {
        headers: {
          Authorization: `Bearer ${token}`, // ‚úÖ ‡πÅ‡∏ô‡∏ö Token ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
        },
      });
  
      setCourses(response.data);
    } catch (error) {
      console.error("‚ùå Error fetching courses:", error);
      Alert.alert("‚ö† ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏î‡πâ");
    } finally {
      setLoading(false);
    }
  };
  
  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™
  const handleDeleteCourse = async (courseId) => {
    Alert.alert(
      "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö",
      "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      [
        { text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: "cancel" },
        {
          text: "‡∏•‡∏ö",
          style: "destructive",
          onPress: async () => {
            try {
              const token = await AsyncStorage.getItem("authToken");
              if (!token) {
                console.error("Token not found, please login again.");
                return;
              }
  
              const response = await axios.delete(DELETE_COURSE_API_URL(courseId), {
                headers: { Authorization: `Bearer ${token}` },
              });
  
              if (response.status === 200 || response.status === 204) {
                setCourses((prevCourses) => prevCourses.filter((course) => course.id !== courseId));
                Alert.alert("‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
              } else {
                Alert.alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏î‡πâ", response.data?.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏");
              }
            } catch (error) {
              console.error("Error deleting course:", error);
              Alert.alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏î‡πâ", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
            }
          },
        },
      ]
    );
  };
  

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™
  const handleCloseCourse = async (courseId) => {
    Alert.alert(
      "‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£",
      "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      [
        { text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: "cancel" },
        {
          text: "‡∏õ‡∏¥‡∏î",
          style: "destructive",
          onPress: async () => {
            try {
              const token = await AsyncStorage.getItem("authToken");
              if (!token) {
                console.error("Token not found.");
                return;
              }

              await axios.post(CLOSE_COURSE_API_URL(courseId), {}, {
                headers: { Authorization: `Bearer ${token}` },
              });
              

              fetchCourses();
              Alert.alert("‚úÖ ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
            } catch (error) {
              console.error("Error closing course:", error);
              Alert.alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ");
            }
          },
        },
      ]
    );
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  const handleReopenCourse = async (courseId) => {
    Alert.alert(
      "‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      [
        { text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: "cancel" },
        {
          text: "‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£",
          style: "default",
          onPress: async () => {
            try {
              const token = await AsyncStorage.getItem("authToken");
              if (!token) {
                console.error("Token not found.");
                return;
              }

              await axios.post(REOPEN_COURSE_API_URL(courseId), {}, {
                headers: { Authorization: `Bearer ${token}` },
              });
              

              fetchCourses();
              Alert.alert("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
            } catch (error) {
              console.error("Error reopening course:", error);
              Alert.alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ");
            }
          },
        },
      ]
    );
  };


  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≠‡∏£‡πå‡∏™
  const getStatusStyle = (status) => {
    switch (status) {
      case "pending":
        return { color: "orange", text: "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" };
      case "approved":
        return { color: "green", text: "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß" };
      case "revision":
        return { color: "red", text: "‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" };
      case "revised":
        return { color: "blue", text: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" };
      default:
        return { color: "gray", text: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö" };
    }
  };

  return (
    <View style={styles.a1}>
      <InstructorsHeader />
      <View style={styles.a2}>
        <Text style={styles.headerTitle}>üìö ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏à‡∏≠‡∏á</Text>

        <ScrollView contentContainerStyle={styles.contentContainer}>
          {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™ */}
          <TouchableOpacity
            style={styles.addCourseButton}
            onPress={() => navigation.navigate("AddCourse")}
          >
            <Text style={styles.addCourseButtonText}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Text>
          </TouchableOpacity>

          {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™ */}
          {loading ? (
            <ActivityIndicator size="large" color="#FF5733" style={styles.loadingText} />
          ) : courses.length > 0 ? (
            courses.map((course:any) => {
              const status = getStatusStyle(course.status);
              return (
                <View key={course.id} style={styles.courseCard}>
                  <Image source={{ uri: course.image_url }} style={styles.courseImage} />
                  <View style={styles.courseDetails}>
                    <Text style={styles.courseTitle}>{course.title}</Text>
                    <Text style={styles.coursePrice}>üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: {course.price} ‡∏ö‡∏≤‡∏ó</Text>
                    <Text style={styles.courseInstructor}>üë®‚Äçüè´ ‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô: {course.instructor}</Text>
                    <Text style={[styles.courseStatus, { color: status.color }]}>üìå {status.text}</Text>
                    {course.status === "revision" && course.revision_message && (
                      <Text style={styles.revisionMessage}>‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {course.revision_message}</Text>
                    )}
                                    {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏•‡∏ö */}
                <View style={{ flexDirection: "row", marginTop: 4 }}>
                  <TouchableOpacity
                    style={{ backgroundColor: "#3498db", padding: 10, borderRadius: 5, marginRight: 30 }}
                    onPress={() => navigation.navigate("EditCourseScreen", { courseId: course.id })}
                  >
                    <Text style={{ color: "#fff" }}>‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</Text>
                  </TouchableOpacity>

                  <TouchableOpacity
                    style={{ backgroundColor: "#e74c3c", padding: 10, borderRadius: 5 }}
                    onPress={() => handleDeleteCourse(course.id)}
                  >
                    <Text style={{ color: "#fff" }}>üóëÔ∏è ‡∏•‡∏ö</Text>
                  </TouchableOpacity>


 

                </View>
                {course.is_closed ? (
                        <TouchableOpacity
                          style={{ backgroundColor: "#4CAF50", padding: 10, borderRadius: 5, marginLeft: 0 ,marginTop:6}}
                          onPress={() => handleReopenCourse(course.id)}
                        >
                          <Text style={{ color: "#fff" }}>üîì ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£</Text>
                        </TouchableOpacity>
                      ) : (
                        <TouchableOpacity
                          style={{ backgroundColor: "#FF5733", padding: 10, borderRadius: 5, marginLeft: 0 ,marginTop:6}}
                          onPress={() => handleCloseCourse(course.id)}
                        >
                          <Text style={{ color: "#fff" }}>üîí ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£</Text>
                        </TouchableOpacity>
                      )}

                
                
                  </View>
                </View>
              );
            })
          ) : (
            <Text style={styles.noDataText}>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Text>
          )}
        </ScrollView>
      </View>
    </View>
  );
};

export default ReservationCourses;
