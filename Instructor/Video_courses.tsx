  import React, { useState, useEffect } from "react"; 
  import { 
    View, Text, ScrollView, TouchableOpacity, ActivityIndicator, 
    Image, Alert 
  } from "react-native";
  import axios from "axios";
  import styles from "../styles/Video_courses"; 
  import InstructorsHeader from "../components/InstructorsHeader";
  import { VIDEO_COURSES_API_URL, DELETE_VIDEO_COURSE_API_URL } from "../config/apiConfig";
  import AsyncStorage from '@react-native-async-storage/async-storage';

  const VideoCourses = ({ navigation }) => {
    const [courses, setCourses] = useState([]); // тЬЕ р╣Ар╕Бр╣Зр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕нр╕гр╣Мр╕к
    const [loading, setLoading] = useState(true);

    useEffect(() => {
      fetchCourses(); // тЬЕ р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕нр╕гр╣Мр╕кр╕зр╕┤р╕Фр╕╡р╣Вр╕н
    }, []);

    const fetchCourses = async () => {
      try {
        const token = await AsyncStorage.getItem("authToken");
        if (!token) {
          console.error("тЭМ Token not found.");
          return;
        }

        const response = await axios.get(VIDEO_COURSES_API_URL, {
          headers: { Authorization: `Bearer ${token}` },
        });

        console.log("ЁЯУМ API Response:", response.data); // тЬЕ Debugging

        if (response.data.courses) {
          setCourses(response.data.courses);
        } else {
          console.warn("тЪа р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕нр╕гр╣Мр╕кр╣Ар╕гр╕╡р╕вр╕Щр╕Чр╕╡р╣Ир╕Фр╕╢р╕Зр╕бр╕▓р╣Др╕Фр╣Й");
        }
      } catch (error) {
        console.error("тЭМ Error fetching courses:", error);
        Alert.alert("тЪа р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕нр╕гр╣Мр╕кр╣Др╕Фр╣Й");
      } finally {
        setLoading(false);
      }
    };

    // тЬЕ р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕ер╕Ър╕Др╕нр╕гр╣Мр╕к
    const handleDeleteCourse = async (courseId) => {
      Alert.alert(
        "р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕Бр╕▓р╕гр╕ер╕Ъ",
        "р╕Др╕╕р╕Ур╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕ер╕Ър╕Др╕нр╕гр╣Мр╕кр╕Щр╕╡р╣Йр╣Гр╕Кр╣Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣И?",
        [
          { text: "р╕вр╕Бр╣Ар╕ер╕┤р╕Б", style: "cancel" },
          {
            text: "р╕ер╕Ъ",
            style: "destructive",
            onPress: async () => {
              try {
                const token = await AsyncStorage.getItem("authToken");
                if (!token) {
                  console.error("Token not found, please login again.");
                  return;
                }

                const response = await axios.delete(DELETE_VIDEO_COURSE_API_URL(courseId), {
                  headers: { Authorization: `Bearer ${token}` },
                });
                

                if (response.status === 200 || response.status === 204) {
                  setCourses((prev) => prev.filter((course) => course.id !== courseId));
                  Alert.alert("тЬЕ р╕ер╕Ър╕Др╕нр╕гр╣Мр╕кр╕кр╕│р╣Ар╕гр╣Зр╕И");
                } else {
                  Alert.alert("тЪая╕П р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕ер╕Ър╕Др╕нр╕гр╣Мр╕кр╣Др╕Фр╣Й", response.data?.error || "р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф");
                }
              } catch (error) {
                console.error("Error deleting course:", error);
                Alert.alert("тЪая╕П р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕ер╕Ър╕Др╕нр╕гр╣Мр╕кр╣Др╕Фр╣Й", "р╕Бр╕гр╕╕р╕Ур╕▓р╕ер╕нр╕Зр╣Гр╕лр╕бр╣Ир╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕З");
              }
            },
          },
        ]
      );
    };

    return (
      <View style={styles.a1}>
        <InstructorsHeader />
        <View style={styles.a2}>
          <Text style={styles.headerTitle}>ЁЯОе р╕Др╕нр╕гр╣Мр╕кр╣Ар╕гр╕╡р╕вр╕Щр╣Бр╕Ър╕Ър╕зр╕┤р╕Фр╕╡р╣Вр╕н</Text>

          <ScrollView contentContainerStyle={styles.contentContainer}>
            {/* тЬЕ р╕Ыр╕╕р╣Ир╕бр╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕нр╕гр╣Мр╕к */}
            <TouchableOpacity
              style={styles.addCourseButton}
              onPress={() => navigation.navigate("AddVideoCourseScreen")}
            >
              <Text style={styles.addCourseButtonText}>тЮХ р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕нр╕гр╣Мр╕кр╣Ар╕гр╕╡р╕вр╕Щ</Text>
            </TouchableOpacity>

            {/* тЬЕ р╣Бр╕кр╕Фр╕Зр╕Др╕нр╕гр╣Мр╕к */}
            {loading ? (
              <ActivityIndicator size="large" color="#FF5733" style={styles.loadingText} />
            ) : courses.length > 0 ? (
              courses.map((course:any) => (
                <View key={course.id} style={styles.courseCard}>
                  <Image source={{ uri: course.image_url }} style={styles.courseImage} />
                  <View style={styles.courseDetails}>
                    <Text style={styles.courseTitle}>{course.title}</Text>
                    <Text style={styles.coursePrice}>ЁЯТ░ р╕гр╕▓р╕Др╕▓: {course.price} р╕Ър╕▓р╕Ч</Text>
                    <Text style={styles.courseInstructor}>ЁЯСитАНЁЯПл р╕Ьр╕╣р╣Йр╕кр╕нр╕Щ: {course.instructor}</Text>
                    <Text style={styles.courseCreated}>ЁЯУЕ р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕З: {course.created_at}</Text>

                    {/* тЬЕ р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕В р╕Цр╣Йр╕▓р╕бр╕╡ */}
                    {course.revision_message && (
                      <Text style={styles.revisionMessage}>тЪа р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕: {course.revision_message}</Text>
                    )}

                    {/* тЬЕ р╕Ыр╕╕р╣Ир╕бр╣Бр╕Бр╣Йр╣Др╕Вр╣Бр╕ер╕░р╕ер╕Ъ */}
                    <View style={{ flexDirection: "row", marginTop: 4 }}>
                      <TouchableOpacity
                        style={{ backgroundColor: "#3498db", padding: 10, borderRadius: 5, marginRight: 10 }}
                        onPress={() => navigation.navigate("EditVideoCourseScreen", { courseId: course.id })}
                      >
                        <Text style={{ color: "#fff" }}>тЬПя╕П р╣Бр╕Бр╣Йр╣Др╕В</Text>
                      </TouchableOpacity>

                      <TouchableOpacity
                        style={{ backgroundColor: "#e74c3c", padding: 10, borderRadius: 5 }}
                        onPress={() => handleDeleteCourse(course.id)}
                      >
                        <Text style={{ color: "#fff" }}>ЁЯЧСя╕П р╕ер╕Ъ</Text>
                      </TouchableOpacity>
                    </View>
                  </View>
                </View>
              ))
            ) : (
              <Text style={styles.noDataText}>тЭМ р╣Др╕бр╣Ир╕бр╕╡р╕Др╕нр╕гр╣Мр╕кр╣Ар╕гр╕╡р╕вр╕Щ</Text>
            )}
          </ScrollView>
        </View>
      </View>
    );
  };

  export default VideoCourses;
