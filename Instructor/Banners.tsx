import React, { useState, useEffect, useCallback } from "react";
import { 
  View, Text, ScrollView, TouchableOpacity, Image, 
  ActivityIndicator, StyleSheet, Alert 
} from "react-native";
import axios from "axios";
import AsyncStorage from "@react-native-async-storage/async-storage"; // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á Token
import InstructorsHeader from "../components/InstructorsHeader";
import { useNavigation } from "@react-navigation/native";
import { BANNERS_LIST_API_URL, DELETE_BANNER_API_URL } from "../config/apiConfig"; // ‚úÖ ‡πÉ‡∏ä‡πâ API ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

const Banners = () => {
  const [slides, setSlides] = useState([]);
  const [loading, setLoading] = useState(true);
  const navigation = useNavigation();

  useEffect(() => {
    fetchSlides();
  }, []);

  const fetchSlides = useCallback(async () => {
    try {
      const token = await AsyncStorage.getItem("authToken"); // ‚úÖ ‡∏î‡∏∂‡∏á Token ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
      if (!token) {
        console.error("‚ùå No auth token found.");
        return;
      }

      const response = await axios.get(BANNERS_LIST_API_URL, {
        headers: { Authorization: `Bearer ${token}` },
      });

      setSlides(response.data);
    } catch (error) {
      console.error("‚ö†Ô∏è Error fetching slides:", error);
    } finally {
      setLoading(false);
    }
  }, []);

  const handleDeleteSlide = (slideId:any) => {
    Alert.alert(
      "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö",
      "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡πÑ‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      [
        { text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: "cancel" },
        {
          text: "‡∏•‡∏ö",
          style: "destructive",
          onPress: async () => {
            try {
              const token = await AsyncStorage.getItem("authToken");
              if (!token) {
                console.error("‚ùå No auth token found.");
                return;
              }

              await axios.delete(DELETE_BANNER_API_URL(slideId), {  // ‚úÖ ‡πÉ‡∏ä‡πâ API ‡∏•‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                headers: { Authorization: `Bearer ${token}` },
              });

              setSlides((prevSlides:any) => prevSlides.filter(slide => slide.id !== slideId));
              Alert.alert("‚úÖ ‡∏•‡∏ö‡∏™‡πÑ‡∏•‡∏î‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
            } catch (error) {
              console.error("‚ùå Error deleting slide:", error);
              Alert.alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡πÑ‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ");
            }
          },
        },
      ]
    );
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const getStatusStyle = (status:any) => {
    switch (status) {
      case "pending":
        return { color: "orange", text: "‚è≥ ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" };
      case "approved":
        return { color: "green", text: "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß" };
      case "rejected":
        return { color: "red", text: "‚ùå ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò" };
      default:
        return { color: "gray", text: "‚ùì ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" };
    }
  };

  return (
    <View style={styles.container1}>
      <InstructorsHeader />

      <View style={styles.container2}>
        <Text style={styles.headerTitle}>üì¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÑ‡∏•‡∏î‡πå‡πÇ‡∏ä‡∏ß‡πå</Text>

        <ScrollView contentContainerStyle={styles.contentContainer}>
          {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πÑ‡∏•‡∏î‡πå‡πÇ‡∏ä‡∏ß‡πå */}
          <TouchableOpacity
            style={styles.addSlideButton}
            onPress={() => navigation.navigate("AddBannerScreen")}
          >
            <Text style={styles.addSlideButtonText}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πÑ‡∏•‡∏î‡πå‡πÇ‡∏ä‡∏ß‡πå</Text>
          </TouchableOpacity>

          {/* ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
          {loading ? (
            <ActivityIndicator size="large" color="#FF5733" style={styles.loadingText} />
          ) : slides.length > 0 ? (
            slides.map((slide:any) => {
              const status = getStatusStyle(slide.status);
              return (
                <View key={slide.id} style={styles.slideCard}>
                  <Image 
  source={{ uri: slide.image_url }} 
  style={styles.slideImage} 
  onError={() => console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ", slide.image_url)}
/>
                  <View style={styles.slideDetails}>
                    <Text style={styles.slideDate}>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {slide.created_at}</Text>

                    {/* ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå */}
                    <Text style={[styles.statusText, { color: status.color }]}>
                      {status.text}
                    </Text>

                    {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) */}
                    {slide.status === "rejected" && slide.rejection_message && (
                      <Text style={styles.rejectionMessage}>
                        ‚ùó ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {slide.rejection_message}
                      </Text>
                    )}

                    {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏™‡πÑ‡∏•‡∏î‡πå */}
                    <TouchableOpacity
                      style={styles.deleteButton}
                      onPress={() => handleDeleteSlide(slide.id)}
                    >
                      <Text style={styles.deleteButtonText}>üóë ‡∏•‡∏ö</Text>
                    </TouchableOpacity>
                  </View>
                </View>
              );
            })
          ) : (
            <Text style={styles.noDataText}>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡πÑ‡∏•‡∏î‡πå</Text>
          )}
        </ScrollView>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container1: {
    flex: 1,
    backgroundColor: "#FFF7F2",
  },
  container2: {
    flex: 1,
    backgroundColor: "#FFF7F2",
    padding: 20,
    marginTop: 70,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#FF5733",
    textAlign: "center",
    marginVertical: 20,
  },
  contentContainer: {
    paddingHorizontal: 20,
  },
  addSlideButton: {
    backgroundColor: "#3498db",
    padding: 10,
    borderRadius: 5,
    alignItems: "center",
    marginBottom: 20,
  },
  addSlideButtonText: {
    color: "#fff",
    fontSize: 18,
  },
  slideCard: {
    backgroundColor: "#fff",
    padding: 15,
    marginBottom: 20,
    borderRadius: 10,
    elevation: 3,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
  },
  slideImage: {
    width: "100%",
    height: 98,
    borderRadius: 2,
    marginBottom: 15,
  },
  slideDetails: {
    marginTop: 10,
  },
  slideDate: {
    fontSize: 14,
    color: "#888",
  },
  statusText: {
    fontSize: 16,
    fontWeight: "bold",
    marginVertical: 5,
  },
  rejectionMessage: {
    fontSize: 14,
    color: "red",
    fontWeight: "bold",
    marginTop: 5,
  },
  deleteButton: {
    backgroundColor: "#FF5733",
    padding: 10,
    borderRadius: 5,
    marginTop: 10,
    alignItems: "center",
  },
  deleteButtonText: {
    color: "#fff",
    fontSize: 16,
  },
  loadingText: {
    textAlign: "center",
    fontSize: 16,
    color: "#888",
    marginTop: 20,
  },
  noDataText: {
    fontSize: 16,
    color: "#888",
    textAlign: "center",
    marginTop: 20,
  },
});

export default Banners;
