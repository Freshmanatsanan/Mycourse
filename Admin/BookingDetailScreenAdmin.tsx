import React, { useState, useEffect } from "react";
import { 
  View, Text, ScrollView, ActivityIndicator, TouchableOpacity, 
  Image, Modal,TouchableWithoutFeedback ,Alert
} from "react-native";
import MaterialIcons from "react-native-vector-icons/MaterialIcons";
import { useNavigation, useRoute } from "@react-navigation/native";

import AsyncStorage from "@react-native-async-storage/async-storage";
import axios from "axios";
import styles from "../styles/BookingDetailScreen"; // ‚úÖ ‡πÉ‡∏ä‡πâ Styles ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin
import { ADMIN_BOOKING_DETAIL_API_URL, UPDATE_BOOKING_STATUS_API_URL } from "../config/apiConfig"; // ‚úÖ ‡πÉ‡∏ä‡πâ API Admin

const BookingDetailScreenAdmin = () => {
  const [bookings, setBookings] = useState([]);
  const [courseTitle, setCourseTitle] = useState("");
  const [loading, setLoading] = useState(true);
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedSlip, setSelectedSlip] = useState(null);
  const navigation = useNavigation();
  const route = useRoute();
  
  const { courseId } = route.params; // ‚úÖ ‡∏£‡∏±‡∏ö `courseId` ‡∏à‡∏≤‡∏Å params
  
  useEffect(() => {
    fetchBookingDetails();
  }, []);

  const fetchBookingDetails = async () => {
    try {
        const token = await AsyncStorage.getItem("authToken");
        if (!token) {
            console.error("‚ùå Token not found, please login again.");
            setLoading(false);
            return;
        }

        const response = await axios.get(ADMIN_BOOKING_DETAIL_API_URL(courseId), {
            headers: { Authorization: `Bearer ${token}` },
        });

        console.log("‚úÖ API Response:", response.data);

        if (response.status === 200) {
            setBookings(response.data.bookings || []);
            setCourseTitle(response.data.course.title || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™");
        }
        setLoading(false);
    } catch (error) {
        console.error("‚ùå Error fetching booking details:", error);
        setLoading(false);
    }
  };

  const updateBookingStatus = async (bookingId, status) => {
    if (!bookingId) {
        console.error("‚ùå bookingId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", bookingId);
        Alert.alert("‚ö†Ô∏è bookingId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ");
        return;
    }

    console.log("üîπ ‡∏™‡πà‡∏á bookingId:", bookingId, "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô", status);

    try {
        const token = await AsyncStorage.getItem("authToken");
        if (!token) {
            Alert.alert("‚ö†Ô∏è Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
            return;
        }

        const response = await axios.post(UPDATE_BOOKING_STATUS_API_URL(bookingId), 
            { status }, 
            { headers: { Authorization: `Bearer ${token}` } }
        );

        Alert.alert("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô ${status}`);
        fetchBookingDetails(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    } catch (error) {
        console.error("‚ùå Error updating booking status:", error.response?.data || error.message);
        Alert.alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ");
    }
  };

  const statusColor = (status) => {
    switch (status) {
      case "‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à":
        return "green";
      case "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô":
        return "orange";
      case "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å":
        return "red";
      default:
        return "gray";
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>
        üìö ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á - <Text style={{ color: "#ff6b6b" }}>{courseTitle}</Text>
      </Text>

      {loading ? (
        <ActivityIndicator size="large" color="#FF7D0C"  />
      ) : (
        <ScrollView style={styles.scrollView}>
          {bookings.length > 0 ? (
            bookings.map((booking:any, index) => (
              <View key={index} style={styles.bookingCard}>
                <Text style={styles.detailText}>üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (TH): {booking.student_name_th}</Text>
                <Text style={styles.detailText}>üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (EN): {booking.student_name_en}</Text>
                <Text style={styles.detailText}>üè´ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô: {booking.grade}</Text>
                <Text style={styles.detailText}>üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: {booking.phone}</Text>
                <Text style={styles.detailText}>üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: {booking.email}</Text>
                <Text style={styles.detailText}>üìÜ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á: {booking.booking_date}</Text>
                <Text style={styles.detailText}>üìå ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {booking.selected_course}</Text>

                {booking.payment_slip ? (
                  <TouchableOpacity onPress={() => {
                    setSelectedSlip(booking.payment_slip);
                    setModalVisible(true);
                  }}>
                    <Image source={{ uri: booking.payment_slip }} style={styles.slipImage} />
                  </TouchableOpacity>
                ) : (
                  <Text style={styles.noSlipText}>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ</Text>
                )}

                <Text style={[styles.statusText, { color: statusColor(booking.booking_status) }]}>
                  üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {booking.booking_status}
                </Text>

                {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
                <View style={styles.buttonContainer}>
                  <TouchableOpacity
                    style={styles.confirmButton}
                    onPress={() => updateBookingStatus(booking.id, "confirmed")}
                  >
                    <Text style={styles.buttonText}>‚úÖ ‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</Text>
                  </TouchableOpacity>

                  <TouchableOpacity
                    style={styles.rejectButton}
                    onPress={() => updateBookingStatus(booking.id, "rejected")}
                  >
                    <Text style={styles.buttonText}>‚ùå ‡∏à‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</Text>
                  </TouchableOpacity>
                </View>
              </View>
            ))
          ) : (
            <Text>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</Text>
          )}
        </ScrollView>
      )}

{/* ‚úÖ Modal ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà */}
<Modal 
  visible={modalVisible} 
  transparent={true} 
  animationType="fade"
  onRequestClose={() => setModalVisible(false)} // ‚úÖ ‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏±‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Back
>
  <TouchableWithoutFeedback onPress={() => setModalVisible(false)}>
    <View style={styles.modalContainer}>
      <View style={styles.modalContent}>
        {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô */}
        <TouchableOpacity style={styles.closeButton} onPress={() => setModalVisible(false)}>
          <Text style={styles.closeButtonText}>‚ùå ‡∏õ‡∏¥‡∏î</Text>
        </TouchableOpacity>
        
        {selectedSlip && (
          <Image source={{ uri: selectedSlip }} style={styles.fullSlipImage} />
        )}
      </View>
    </View>
  </TouchableWithoutFeedback>
</Modal>


      {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö */}
      <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
        <MaterialIcons name="arrow-back" size={24} color="#fff" />
        <Text style={styles.backText}>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</Text>
      </TouchableOpacity>
    </View>
  );
};

export default BookingDetailScreenAdmin;
