import React, { useState, useEffect } from "react";
import { View, Text, ScrollView, Image, ActivityIndicator, TouchableOpacity } from "react-native";
import axios from "axios";
import { USER_BOOKING_HISTORY_API_URL } from "../config/apiConfig";
import AsyncStorage from "@react-native-async-storage/async-storage";
import styles from "../styles/BookingHistoryStyles";
import { useNavigation } from "@react-navigation/native"; // ‚úÖ ‡πÉ‡∏ä‡πâ navigation
import MaterialIcons from "react-native-vector-icons/MaterialIcons"; // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô

const BookingHistoryScreen = () => {
  const navigation = useNavigation(); // ‚úÖ ‡πÉ‡∏ä‡πâ navigation
  const [bookingHistory, setBookingHistory] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      await fetchUserBookingHistory();
    };
    fetchData();
  }, []);

  const fetchUserBookingHistory = async () => {
    try {
      const token = await AsyncStorage.getItem("authToken");
      if (!token) {
        console.error("‚ö†Ô∏è Token is missing! ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô");
        return;
      }

      const response = await axios.get(USER_BOOKING_HISTORY_API_URL, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("üìå ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:", response.data);
      setBookingHistory(response.data);
    } catch (error) {
      console.error("‚ùå Error fetching booking history:", error);
      setBookingHistory([]); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    } finally {
      setLoading(false);
    }
  };

  return (
    <ScrollView style={styles.container}>
      
      {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö */}
      <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
        <MaterialIcons name="arrow-back" size={24} color="#FFFFFF" />
        <Text style={styles.backButtonText}></Text>
      </TouchableOpacity>

      <Text style={styles.title}>üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</Text>

      {loading ? (
        <ActivityIndicator size="large" color="#FF7D0C" />
      ) : bookingHistory.length > 0 ? (
        bookingHistory.map((booking:any) => (
          <View key={booking.id} style={styles.card}>
            <Text style={styles.courseTitle}>{booking.course_title}</Text>
            <Text style={styles.infoText}>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á: {booking.booking_date}</Text>
            <Text style={styles.infoText}>‚è≥ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {booking.selected_course}</Text>
            <Text style={styles.status}>üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: {booking.booking_status_display || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</Text>
            <Text style={styles.status}>üí≥ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: {booking.get_payment_status_display || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</Text>

            {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà */}
            {booking.payment_slip_url ? (
              <Image source={{ uri: booking.payment_slip_url }} style={styles.paymentSlip} />
            ) : (
              <Text style={styles.noSlipText}>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô</Text>
            )}
          </View>
        ))
      ) : (
        <Text style={styles.noBookingText}>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</Text>
      )}

    </ScrollView>
  );
};

export default BookingHistoryScreen;
