import React, { useEffect, useState, useRef } from 'react';
import {
  View,
  Text,
  Alert,
  TextInput,
  Image,
  ScrollView,
  TouchableOpacity,
  ActivityIndicator,
  FlatList,
  Dimensions,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';
import styles from '../styles/HomeStyles';
import { COURSES_API_URL, BANNERS_API_URL, PROFILE_API_URL } from '../config/apiConfig'; // ‚úÖ ‡πÉ‡∏ä‡πâ URL API ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
import LinearGradient from 'react-native-linear-gradient';

const { width } = Dimensions.get('window');

const HomeScreen = ({ navigation }: any) => {
  const [loading, setLoading] = useState(true);
  const [courses, setCourses] = useState<any[]>([]);
  const [banners, setBanners] = useState<any[]>([]);
  const bannerListRef = useRef<FlatList>(null);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [profilePicture, setProfilePicture] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [videoCourses, setVideoCourses] = useState<any[]>([]);

  useEffect(() => {
    checkToken();
    fetchCourses();
    fetchBanners();
    fetchProfilePicture();
  }, []);

  // ‚úÖ ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ Banner ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  useEffect(() => {
    if (banners.length === 0) return; 

    const interval = setInterval(() => {
      const nextIndex = (currentIndex + 1) % banners.length;
      setCurrentIndex(nextIndex);

      bannerListRef.current?.scrollToIndex({
        index: nextIndex,
        animated: true,
      });
    }, 3000); 

    return () => clearInterval(interval); 
  }, [currentIndex, banners]);

  const checkToken = async () => {
    try {
      const token = await AsyncStorage.getItem('authToken');
      if (!token) {
        Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
        navigation.navigate('Login');
      }
    } catch (error) {
      console.error('Error retrieving token:', error);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token');
    }
  };

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏à‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠)
  const fetchCourses = async () => {
    try {
      const response = await axios.get(COURSES_API_URL);
      console.log('API Response:', response.data);

      setBanners(response.data.banners);
      setCourses(response.data.courses || []);
      setVideoCourses(response.data.video_courses || []); // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô undefined

    } catch (error) {
      console.error('Error fetching courses:', error);
      Alert.alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ');
    } finally {
      setLoading(false);
    }
  };

  const fetchBanners = async () => {
    try {
      const response = await axios.get(BANNERS_API_URL);
      setBanners(response.data);
    } catch (error) {
      console.error("Error fetching banners:", error);
    }
  };

  const fetchProfilePicture = async () => {
    try {
      const token = await AsyncStorage.getItem('authToken');
      if (!token) return;
      const response = await axios.get(PROFILE_API_URL, {
        headers: { Authorization: `Bearer ${token}` }
      });
      if (response.data && response.data.profile_picture) {
        setProfilePicture(response.data.profile_picture);
      }
    } catch (error) {
      console.error('Error fetching profile picture:', error);
    }
  };

  const handleSearchSubmit = () => {
    navigation.navigate('Courses', { searchQuery });
  };

  return (
    <View style={{ flex: 1 }}>
      {/* Scrollable Content */}
      <ScrollView style={styles.container} contentContainerStyle={{ paddingBottom: 80 }}>
        {/* Header */}
        {/* Header */}
        <View style={styles.header}>
          <Image source={require('../assets/logo.png')} style={styles.logo} />
          <View style={styles.searchContainer}>
            <TextInput
              style={styles.searchInput}
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
              value={searchQuery}
              onChangeText={setSearchQuery} // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            />
            <TouchableOpacity style={styles.searchButton} onPress={handleSearchSubmit}>
              <Text style={styles.searchIcon}>üîç</Text>
            </TouchableOpacity>
          </View>

          <TouchableOpacity
            style={styles.profileButton}
            onPress={() => navigation.navigate('Profile')}
          >
            {profilePicture ? (
              <Image source={{ uri: profilePicture }} style={styles.profileImage} />
            ) : (
              <Text style={styles.profileIcon}>üë§</Text>
            )}
          </TouchableOpacity>
        </View>
        

        {/* Welcome Section */}
        <View style={styles.welcomeSection}>
          <Text style={styles.title}> Welcome To </Text>        
          <Text style={styles.highlight1}> I  
            <Text style={styles.roar}> say </Text>
            <Text style={styles.roar1}> ROAR!</Text>
          </Text>

          <View style={styles.bannerContainer}>
          <FlatList
            ref={bannerListRef}
            data={banners}
            horizontal
            pagingEnabled
            showsHorizontalScrollIndicator={false}
            keyExtractor={(item) => item.id.toString()}
            renderItem={({ item }) => (
              <Image source={{ uri: item.image_url }} style={styles.bannerImage} />
            )}
            getItemLayout={(data, index) => ({
              length: width,
              offset: width * index,
              index,
            })}
          />
        </View>

          <Text style={styles.description00}>I say ROAR!</Text>
          <Text style={styles.description0}>‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</Text>
          <View style={{ alignItems: 'center', justifyContent: 'center' }}>
            <Text style={styles.description}> ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á </Text>
            <Text style={styles.description}>‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©</Text>
            <Text style={styles.description}>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏•‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ! ‡∏°‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÑ‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà</Text>
            <Text style={styles.description}>ISR!</Text>
          </View>
          <TouchableOpacity>
            <Text style={styles.linkText}>‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</Text>
          </TouchableOpacity>
        </View>

        {/* Recommended Courses Section */}
        <View style={styles.courseSection}>
  <Text style={styles.sectionTitleOnline}>‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</Text>
  <LinearGradient
    colors={['rgba(24, 170, 227, 0.6)', 'rgba(232, 141, 213, 0.5)', 'rgba(255, 125, 12, 0.4)']}
    start={{ x: 0, y: 0 }}
    end={{ x: 1, y: 1 }}
    style={styles.divider}
  />

  {loading ? (
    <ActivityIndicator size="large" color="#FF7D0C" />
  ) : (
    <FlatList
      data={videoCourses}
      horizontal
      showsHorizontalScrollIndicator={false}
      keyExtractor={(item) => item.id.toString()}
      renderItem={({ item }) => (
        <View style={styles.card}>
          <Image source={{ uri: item.image_url }} style={styles.cardImage} />
          <Text style={styles.cardText}>{item.title}</Text>
          <Text style={styles.cardDescription}>{item.instructor}</Text>
          <Text style={styles.cardPrice}>{item.price} ‡∏ö‡∏≤‡∏ó</Text>
          <TouchableOpacity
            style={styles.cardButton1}
            onPress={() => navigation.navigate('PurchaseVideoCourseScreen', { courseId: item.id })}
          >
            <Text style={styles.cardButtonText}>‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™</Text>
          </TouchableOpacity>
        </View>
      )}
      ListEmptyComponent={<Text style={styles.noDataText}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</Text>}
    />
  )}
</View>



        

    
        {/* Recommended Courses Section */}
        <View style={styles.courseSection}>
  <Text style={styles.sectionTitleOnsite}>‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏ã‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</Text>
  <LinearGradient
    colors={['rgba(24, 170, 227, 0.6)', 'rgba(232, 141, 213, 0.5)', 'rgba(255, 125, 12, 0.4)']}
    start={{ x: 0, y: 0 }}
    end={{ x: 1, y: 1 }}
    style={styles.divider}
  />

  {loading ? (
    <ActivityIndicator size="large" color="#FF7D0C" />
  ) : (
    <FlatList
      data={courses}
      horizontal
      showsHorizontalScrollIndicator={false}
      keyExtractor={(item) => item.id.toString()}
      renderItem={({ item }) => (
        <View style={styles.card}>
          <Image source={{ uri: item.image_url }} style={styles.cardImage} />
          <Text style={styles.cardText}>{item.title}</Text>
          <Text style={styles.cardDescription}>{item.instructor}</Text>
          <Text style={styles.cardPrice}>{item.price} ‡∏ö‡∏≤‡∏ó</Text>
          <TouchableOpacity
            style={styles.cardButton}
            onPress={() => navigation.navigate('BookingScreen', { courseId: item.id })}
          >
            <Text style={styles.cardButtonText}>‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™</Text>
          </TouchableOpacity>
        </View>
      )}
      ListEmptyComponent={<Text style={styles.noDataText}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏≠‡∏ô‡πÑ‡∏ã‡∏ï‡πå</Text>}
    />
  )}
</View>

      </ScrollView>
    </View>
  );
};

export default HomeScreen;
