import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
  StyleSheet,
  ScrollView,
  Modal,
} from "react-native";
import { launchImageLibrary } from "react-native-image-picker";
import axios from "axios";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useRoute } from "@react-navigation/native";
import { VIDEO_COURSE_DETAILS_API_URL, PURCHASE_VIDEO_COURSE_API_URL } from "../config/apiConfig";
import styles from '../styles/PurchaseCourseStyles';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';

const PurchaseVideoCourseScreen = ({ navigation }: any) => {
  const route = useRoute();
  const { courseId } = route.params as { courseId: number };

  const [course, setCourse] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [paymentSlip, setPaymentSlip] = useState<any>(null);
  const [modalVisible, setModalVisible] = useState(false);

  useEffect(() => {
    fetchCourseDetails();
  }, []);

  const fetchCourseDetails = async () => {
    try {
      setLoading(true);
      const token = await AsyncStorage.getItem("authToken");
      if (!token) {
        Alert.alert("Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
        navigation.navigate("Login");
        return;
      }

      const response = await axios.get(`${PURCHASE_VIDEO_COURSE_API_URL(courseId)}`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("üìå API Response:", response.data);

      setCourse(response.data);
    } catch (error) {
      console.error("‚ùå Error fetching course details:", error);
      Alert.alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏î‡πâ");
    } finally {
      setLoading(false);
    }
  };

  const handlePickImage = async () => {
    launchImageLibrary(
      {
        mediaType: "photo",
        maxWidth: 800,
        maxHeight: 800,
        quality: 1,
      },
      (response) => {
        if (response.didCancel) {
          console.log("‚õî ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û");
        } else if (response.errorMessage) {
          Alert.alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", response.errorMessage);
        } else if (response.assets && response.assets.length > 0) {
          setPaymentSlip(response.assets[0]);
        }
      }
    );
  };

  const handlePurchase = async () => {
    if (!paymentSlip) {
      Alert.alert("‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô");
      return;
    }

    try {
      setLoading(true);
      setModalVisible(true);

      const token = await AsyncStorage.getItem("authToken");
      const formData = new FormData();
      formData.append("payment_slip", {
        uri: paymentSlip.uri,
        type: paymentSlip.type || "image/jpeg",
        name: "payment_slip.jpg",
      });

      const response = await axios.post(`${PURCHASE_VIDEO_COURSE_API_URL(courseId)}`, formData, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "multipart/form-data",
        },
      });

      console.log("‚úÖ Purchase Response:", response.data);

      setTimeout(() => {
        setModalVisible(false); // ‡∏õ‡∏¥‡∏î Modal
        navigation.goBack(); // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      }, 3000);

    } catch (error) {
      setModalVisible(false);
      console.error("‚ùå Error purchasing course:", error);
      Alert.alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ");
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      {loading ? (
        <ActivityIndicator size="large" color="#FF7D0C" />
      ) : (
        <ScrollView contentContainerStyle={{ flexGrow: 1 }} showsVerticalScrollIndicator={false}>
        
          {/* üîô ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö */}
          <View style={styles.headerContainer}>
            <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
              <MaterialIcons name="arrow-back" size={28} color="#FFF" />
            </TouchableOpacity>
          </View>

          {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™ */}
          {course && (
            <View style={styles.courseInfo}>
              <Image source={{ uri: course.image_url }} style={styles.courseImage} />
              <Text style={styles.courseTitle}>{course.title}</Text>
              <Text style={styles.courseDescription}>{course.description}</Text>
              <Text style={styles.coursePrice}>üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: {course.price} ‡∏ö‡∏≤‡∏ó</Text>
            </View>
          )}

          {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á QR Code ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô */}
          {course?.qr_code_url ? (
            <View style={styles.paymentSection}>
              <Text style={styles.paymentTitle}>üìå ‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</Text>
              <Image source={{ uri: course.qr_code_url }} style={styles.qrCode} />
            </View>
          ) : (
            <Text style={styles.noQrText}>‚ö† ‡πÑ‡∏°‡πà‡∏°‡∏µ QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</Text>
          )}

          {/* ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô */}
          <TouchableOpacity style={styles.uploadButton} onPress={handlePickImage}>
            <Text style={styles.uploadButtonText}>
              {paymentSlip ? "üì∏ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà" : "üì§ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ"}
            </Text>
          </TouchableOpacity>

          {paymentSlip && (
            <Image source={{ uri: paymentSlip.uri }} style={styles.uploadedImage} />
          )}

          {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ */}
          <TouchableOpacity style={styles.submitButton} onPress={handlePurchase}>
            <Text style={styles.submitButtonText}>‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠</Text>
          </TouchableOpacity>

        </ScrollView>
      )}

      {/* ‚úÖ Modal Popup ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô */}
      <Modal transparent={true} animationType="fade" visible={modalVisible}>
      <View style={styles.modalContainer}>
        <View style={styles.modalContent}>
          <Image 
            source={require("../assets/cc.png")} // ‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
            style={styles.modalImage}
          />
          <Text style={styles.modalText}>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô</Text>
        </View>
      </View>
    </Modal>

    </View>
  );
};

export default PurchaseVideoCourseScreen;
